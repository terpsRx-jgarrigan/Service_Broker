AWSTemplateFormatVersion: '2010-09-09'
Description: This template creates the aws footprint for the Service Broker 

Parameters:
  ElastiCachePort:
    Type: String
    Default: '6379'
    Description: Port for ElastiCache instance

Resources:
  VPC: 
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Name
          Value: !Ref 'AWS::StackId'
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref 'VPC'
      CidrBlock: 10.0.0.0/24
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Name
          Value: PublicSubnet1
  PublicSubnet2:
    Type: AWS::EC2::Subnet 
    Properties: 
      VpcId: !Ref 'VPC'
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref 'AWS::Region'
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Name
          Value: PublicSubnet2
  NatGateway1EIP:
    Type: AWS::EC2::EIP
    DependsOn: AttachGateway
    Properties:
      Domain: vpc
  NatGateway2EIP:
    Type: AWS::EC2::EIP
    DependsOn: AttachGateway
    Properties:
      Domain: vpc
  NatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway1EIP.AllocationId
      SubnetId: !Ref PublicSubnet1
  NatGateway2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway2EIP.AllocationId
      SubnetId: !Ref PublicSubnet2
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref 'VPC'
      CidrBlock: 10.0.2.0/24 
      AvailabilityZone: !Select 
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      Tags: 
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Name
          Value: PrivateSubnet1
  PrivateSubnet2:
    Type: AWS::EC2::Subnet 
    Properties:
      VpcId: !Ref 'VPC'
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: !Select 
        - 1
        - Fn::GetAZs: !Ref 'AWS::Region'
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Name
          Value: PrivateSubnet2
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment 
    Properties:
      VpcId: !Ref 'VPC'
      InternetGatewayId: !Ref 'InternetGateway'
  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
      Tags: 
        - Key: Application
          Value: !Ref 'AWS::StackId'
  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
      Tags: 
        - Key: Application
          Value: !Ref 'AWS::StackId'
  DefaultPrivateRoute1:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties: 
      RouteTableId: !Ref 'PrivateRouteTable1'
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref 'NatGateway1'
  DefaultPrivateRoute2:
    Type: AWS::EC2::Route 
    DependsOn: AttachGateway
    Properties: 
      RouteTableId: !Ref 'PrivateRouteTable2'
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref 'NatGateway2'
  Route:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties: 
      RouteTableId: !Ref 'RouteTable'
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref 'InternetGateway'
  SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'PublicSubnet1'
      RouteTableId: !Ref 'RouteTable'
  SubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'PublicSubnet2'
      RouteTableId: !Ref 'RouteTable'
  PrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      SubnetId: !Ref 'PrivateSubnet1'
      RouteTableId: !Ref 'PrivateRouteTable1'
  PrivateSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      SubnetId: !Ref 'PrivateSubnet2'
      RouteTableId: !Ref 'PrivateRouteTable2'
  NetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties: 
      VpcId: !Ref 'VPC'
      Tags: 
        - Key: Application
          Value: !Ref 'AWS::StackId'
  InboundHTTPNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties: 
      NetworkAclId: !Ref 'NetworkAcl'
      RuleNumber: '100'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange: 
        From: 80
        To: 80
  InboundResponsePortsNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties: 
      NetworkAclId: !Ref 'NetworkAcl'
      RuleNumber: '102'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange: 
        From: '1024'
        To: '65535'
  InternalAllNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties: 
      NetworkAclId: !Ref 'NetworkAcl'
      RuleNumber: '200'
      Protocol: '-1'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 10.0.0.0/16
  OutBoundHTTPNetworkAclEntry: 
    Type: AWS::EC2::NetworkAclEntry
    Properties: 
      NetworkAclId: !Ref 'NetworkAcl'
      RuleNumber: '100'
      Protocol: '6'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      PortRange: 
        From: '80'
        To: '80'
  OutBoundHTTPSNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref 'NetworkAcl'
      RuleNumber: '101'
      Protocol: '6'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      PortRange: 
        From: '443'
        To: '443'
  OutBoundResponsePortsNetworkAclEntry: 
    Type: AWS::EC2::NetworkAclEntry
    Properties: 
      NetworkAclId: !Ref 'NetworkAcl'
      RuleNumber: '102'
      Protocol: '6'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      PortRange: 
        From: '1024'
        To: '65535'
  OutInternalAllNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties: 
      NetworkAclId: !Ref 'NetworkAcl'
      RuleNumber: '200'
      Protocol: '-1'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 10.0.0.0/16
  SubnetNetworkAclAssociation1: 
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties: 
      SubnetId: !Ref 'PublicSubnet1'
      NetworkAclId: !Ref 'NetworkAcl'
  SubnetNetworkAclAssociation2: 
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref 'PublicSubnet2'
      NetworkAclId: !Ref 'NetworkAcl'
  SubnetNetworkAclAssociation3:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref 'PrivateSubnet1'
      NetworkAclId: !Ref 'NetworkAcl'
  SubnetNetworkAclAssociation4:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref 'PrivateSubnet2'
      NetworkAclId: !Ref 'NetworkAcl'
  EcsSecurityGroup: 
    Type: AWS::EC2::SecurityGroup
    Properties: 
      VpcId: !Ref 'VPC'
      GroupDescription: Enable HTTP access to service
      SecurityGroupIngress: 
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          SourceSecurityGroupId: !Ref ALBSecurityGroup
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref ALBSecurityGroup
  ALBSecurityGroup: 
    Type: AWS::EC2::SecurityGroup
    Properties: 
      VpcId: !Ref 'VPC'
      GroupDescription: Enable HTTP access to ALB
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
  RedisSecurityGroup: 
    Type: AWS::EC2::SecurityGroup
    Properties: 
      VpcId: !Ref 'VPC'
      GroupDescription: Enable Redis access
      SecurityGroupIngress: 
        - IpProtocol: tcp
          FromPort: 6379
          ToPort: 6379
          SourceSecurityGroupId: !Ref EcsSecurityGroup
  RedisSubnetGroup:
    Type: AWS::ElastiCache::SubnetGroup
    Properties:
      Description: The subnet group for the redis cluster
      SubnetIds:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
  RedisCluster:
    Type: AWS::ElastiCache::CacheCluster
    Properties: 
      AutoMinorVersionUpgrade: true
      CacheNodeType: cache.t2.micro
      CacheSubnetGroupName: !Ref RedisSubnetGroup
      Engine: redis
      EngineVersion: 3.2.6
      NumCacheNodes: 1
      Port: !Ref ElastiCachePort
      VpcSecurityGroupIds: 
        - !Ref RedisSecurityGroup
  EcsCluster:
    Type: AWS::ECS::Cluster
  EcsServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: ecs-service
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action: ['elasticloadbalancing:DeregisterInstancesFromLoadBalancer', 'elasticloadbalancing:DeregisterTargets',
              'elasticloadbalancing:Describe*', 'elasticloadbalancing:RegisterInstancesWithLoadBalancer', 
                'elasticloadbalancing:RegisterTargets', 'ec2:Describe', 'ec2:AuthorizeSecurityGroupIngress', 's3:*']
              Resource: '*'
  EcsTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs-tasks.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
      - PolicyName: ecs-service
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
              - ecr:GetAuthorizationToken
              - ecr:BatchCheckLayerAvailability
              - ecr:GetDownloadUrlForLayer
              - ecr:BatchGetImage
              - logs:CreateLogStream
              - logs:PutLogEvents
              - s3:*
            Resource: '*'
  EcsAlb:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      LoadBalancerAttributes: 
      - Key: idle_timeout.timeout_seconds
        Value: '30'
      Subnets: 
        - !Ref 'PublicSubnet1'
        - !Ref 'PublicSubnet2'
      SecurityGroups:
        - !Ref 'ALBSecurityGroup'
  AlbListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn: EcsServiceRole
    Properties:
      DefaultActions: 
      - Type: forward
        TargetGroupArn: !Ref 'BackendEcsTg'
      LoadBalancerArn: !Ref 'EcsAlb'
      Port: '80'
      Protocol: HTTP
  EcsAlbBackendListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    DependsOn: AlbListener
    Properties:
      Actions: 
      - Type: forward
        TargetGroupArn: !Ref 'BackendEcsTg'
      Conditions:
      - Field: path-pattern
        Values: [/socket*]
      ListenerArn: !Ref 'AlbListener'
      Priority: 1
  BackendEcsTg:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: EcsAlb
    Properties: 
      HealthCheckIntervalSeconds: 60
      HealthCheckPath: /api/status
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Port: 80 
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      TargetGroupAttributes:
      - Key: stickiness.enabled
        Value: 'true'
      VpcId: !Ref 'VPC'
      TargetType: ip 
  CloudwatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties: 
      LogGroupName: !Sub "EcsLogGroup-${AWS::StackName}"
      RetentionInDays: 14
  taskdefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub "${AWS::StackName}-ecs-backend"
      RequiresCompatibilities:
      - FARGATE
      NetworkMode: awsvpc
      Cpu: 256
      Memory: 1GB
      ExecutionRoleArn: !GetAtt EcsTaskRole.Arn
      ContainerDefinitions:
        - Name: backend
          Cpu: '10'
          Essential: true
          Image: "290781573934.dkr.ecr.us-east-1.amazonaws.com/service-broker-test-env-backend:latest"
          Memory: '1024'
          EnvironmentFiles:
            - Type: "s3"
              Value: "arn:aws:s3:::serverice-broker-test-env-environment-file/test_environment.env"
          Environment:
          - Name: REDIS_HOST
            Value: !GetAtt RedisCluster.RedisEndpoint.Address
          - Name: REDIS_PORT
            Value: !GetAtt RedisCluster.RedisEndpoint.Port
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref "CloudwatchLogsGroup"
              awslogs-region: "us-east-1"
              awslogs-stream-prefix: !Sub "${AWS::StackName}"
          PortMappings:
          - ContainerPort: 8080
  backendService:
    Type: AWS::ECS::Service
    DependsOn: 
      - AlbListener
      - EcsAlbBackendListenerRule
    Properties: 
      Cluster: !Ref "EcsCluster"
      DesiredCount: "1"
      LaunchType: FARGATE
      NetworkConfiguration: 
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups: 
          - !Ref 'EcsSecurityGroup'
          Subnets: 
          - !Ref 'PrivateSubnet1'
          - !Ref 'PrivateSubnet2'
      LoadBalancers:
      - ContainerName: backend
        ContainerPort: '8080'
        TargetGroupArn: !Ref 'BackendEcsTg'
      TaskDefinition: !Ref 'taskdefinition'


Outputs:
  AppUrl:
    Description: Application Endpoint
    Value: !GetAtt EcsAlb.DNSName
  RedisEndpoint:
    Description: RedisEndpoint
    Value: !GetAtt RedisCluster.RedisEndpoint.Address
    Export:
      Name: !Sub ${AWS::StackName}-RedisEndpoint
  RedisPort:
    Description: RedisEndpoint
    Value: !GetAtt RedisCluster.RedisEndpoint.Port
    Export: 
      Name: !Sub ${AWS::StackName}-RedisPort
  VPCId:
    Description: VPC
    Value: !Ref VPC
    Export:
      Name: !Sub ${AWS::StackName}-VPCId
  PublicSubnet1:
    Description: PublicSubnet1
    Value: !Ref PublicSubnet1
    Export: 
      Name: !Sub ${AWS::StackName}-PublicSubnet1
  PublicSubnet2:
    Description: PublicSubnet2
    Value: !Ref PublicSubnet2
    Export:
      Name: !Sub ${AWS::StackName}-PublicSubnet2
  PrivateSubnet1:
    Description: PrivateSubnet1
    Value: !Ref PrivateSubnet1
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnet1
  PrivateSubnet2: 
    Description: PrivateSubnet2
    Value: !Ref PrivateSubnet2
    Export: 
      Name: !Sub ${AWS::StackName}-PrivateSubnet2
  EcsSecurityGroup: 
    Description: EcsSecurityGroup
    Value: !Ref EcsSecurityGroup
    Export: 
      Name: !Sub ${AWS::StackName}-EcsSecurityGroup
  ALBSecurityGroup:
    Description: ALBSecurityGroup
    Value: !Ref ALBSecurityGroup
    Export: 
      Name: !Sub ${AWS::StackName}-ALBSecurityGroup
  AWSRegion:
    Description: AWS Region Stack is Running
    Value: !Sub ${AWS::Region}
    Export: 
      Name: !Sub ${AWS::StackName}-AWSRegion
      